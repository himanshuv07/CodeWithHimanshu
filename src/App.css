interface StudyTopic {
  title: string;
  content: string;
  example?: string;
  points?: string[];
}

interface StudySection {
  id: string;
  title: string;
  description: string;
  topics: StudyTopic[];
}

interface StudyNotes {
  sections: StudySection[];
}

export const studyNotes: Record<string, StudyNotes> = {
  html: {
    sections: [
      {
        id: 'basics',
        title: 'HTML Basics',
        description: 'Learn the fundamental concepts of HTML structure and syntax.',
        topics: [
          {
            title: 'What is HTML?',
            content: 'HTML (HyperText Markup Language) is the standard markup language for creating web pages. It describes the structure of a web page using markup tags.',
            example: `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My First Web Page</title>
</head>
<body>
    <h1>Welcome to HTML</h1>
    <p>This is my first paragraph.</p>
</body>
</html>`,
          },
          {
            title: 'HTML Elements and Tags',
            content: 'HTML elements are the building blocks of HTML pages. They are represented by tags, which are keywords enclosed in angle brackets.',
            points: [
              'Opening tags: <tagname>',
              'Closing tags: </tagname>',
              'Self-closing tags: <br />, <img />',
              'Attributes provide additional information about elements'
            ],
            example: `<p class="highlight">This is a paragraph with a class attribute.</p>
<a href="https://example.com" target="_blank">This is a link</a>
<img src="image.jpg" alt="Description" width="300" height="200" />`
          }
        ]
      },
      {
        id: 'structure',
        title: 'Document Structure',
        description: 'Understanding the basic structure of an HTML document.',
        topics: [
          {
            title: 'HTML Document Structure',
            content: 'Every HTML document has a specific structure that browsers expect to find.',
            points: [
              'DOCTYPE declaration tells the browser which version of HTML to expect',
              'html element is the root element',
              'head contains metadata about the document',
              'body contains the visible content'
            ],
            example: `<!DOCTYPE html>
<html>
<head>
    <title>Page Title</title>
    <meta charset="UTF-8">
</head>
<body>
    <h1>Main Heading</h1>
    <p>Content goes here</p>
</body>
</html>`
          }
        ]
      }
    ]
  },
  css: {
    sections: [
      {
        id: 'basics',
        title: 'CSS Fundamentals',
        description: 'Learn the core concepts of CSS styling and selectors.',
        topics: [
          {
            title: 'What is CSS?',
            content: 'CSS (Cascading Style Sheets) is used to style and layout web pages. It controls the presentation of HTML elements.',
            example: `/* CSS Syntax */
selector {
    property: value;
}

/* Example */
h1 {
    color: blue;
    font-size: 24px;
    text-align: center;
}`,
          },
          {
            title: 'CSS Selectors',
            content: 'Selectors are patterns used to select the elements you want to style.',
            points: [
              'Element selector: p { }',
              'Class selector: .classname { }',
              'ID selector: #idname { }',
              'Universal selector: * { }',
              'Descendant selector: div p { }'
            ],
            example: `/* Element selector */
p {
    color: black;
}

/* Class selector */
.highlight {
    background-color: yellow;
}

/* ID selector */
#header {
    font-size: 32px;
}`
          }
        ]
      },
      {
        id: 'layout',
        title: 'CSS Layout',
        description: 'Understanding positioning, flexbox, and grid layout systems.',
        topics: [
          {
            title: 'Box Model',
            content: 'The CSS box model describes how the different parts of an element (content, padding, border, margin) are calculated.',
            points: [
              'Content: The actual content of the element',
              'Padding: Space between content and border',
              'Border: The border around the element',
              'Margin: Space outside the border'
            ],
            example: `div {
    width: 300px;
    padding: 20px;
    border: 5px solid black;
    margin: 10px;
}`
          }
        ]
      }
    ]
  },
  javascript: {
    sections: [
      {
        id: 'basics',
        title: 'JavaScript Fundamentals',
        description: 'Learn the core concepts of JavaScript programming.',
        topics: [
          {
            title: 'Variables and Data Types',
            content: 'JavaScript has several data types including numbers, strings, booleans, objects, and more.',
            example: `// Variable declarations
let name = "John";          // String
const age = 25;             // Number
var isStudent = true;       // Boolean
let grades = [90, 85, 92];  // Array
let person = {              // Object
    name: "Alice",
    age: 30
};`,
            points: [
              'let: Block-scoped variable',
              'const: Block-scoped constant',
              'var: Function-scoped variable',
              'Always use const for values that won\'t change',
              'Use let for variables that will be reassigned'
            ]
          },
          {
            title: 'Functions',
            content: 'Functions are reusable blocks of code that perform specific tasks.',
            example: `// Function declaration
function greet(name) {
    return "Hello, " + name + "!";
}

// Function expression
const add = function(a, b) {
    return a + b;
};

// Arrow function
const multiply = (a, b) => a * b;

// Usage
console.log(greet("Alice"));    // "Hello, Alice!"
console.log(add(5, 3));         // 8
console.log(multiply(4, 7));    // 28`
          }
        ]
      }
    ]
  },
  react: {
    sections: [
      {
        id: 'basics',
        title: 'React Fundamentals',
        description: 'Learn the core concepts of React library for building user interfaces.',
        topics: [
          {
            title: 'Components and JSX',
            content: 'React components are the building blocks of React applications. JSX is a syntax extension that allows you to write HTML-like code in JavaScript.',
            example: `// Functional component
function Welcome(props) {
    return <h1>Hello, {props.name}!</h1>;
}

// Arrow function component
const Greeting = ({ message }) => {
    return (
        <div>
            <p>{message}</p>
        </div>
    );
};

// Usage
function App() {
    return (
        <div>
            <Welcome name="Alice" />
            <Greeting message="Welcome to React!" />
        </div>
    );
}`,
            points: [
              'Components must return JSX',
              'JSX expressions are wrapped in curly braces {}',
              'Components should start with a capital letter',
              'Props are passed as function parameters'
            ]
          },
          {
            title: 'State and Props',
            content: 'State is data that can change over time, while props are data passed from parent to child components.',
            example: `import { useState } from 'react';

function Counter() {
    const [count, setCount] = useState(0);

    return (
        <div>
            <p>Count: {count}</p>
            <button onClick={() => setCount(count + 1)}>
                Increment
            </button>
        </div>
    );
}

// Parent component passing props
function App() {
    return <Counter initialValue={0} />;
}`
          }
        ]
      }
    ]
  }
};